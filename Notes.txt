COMSOL3DBin Notes Summer 2015

7/29/15

COMSOL3DBin has been used happily for a year. I now want to improve the
smoothing. I implemented quadrant averaging a long time ago and it made a
significant improvement in the data smoothness. Now I want to add a much more
robust smoothing using the Gauss-Seidel algorithm.

I have a non-isotropic version of Gauss-Seidel running so I should be able
to add it into COMSOL3DBin quite easily.

The basic strategy is simple. I just implement a new smoothing routine just
like the quadrant smoother BUT there is the complication of needing a secondary
array to control the process and of filling that array from the geometry. The
main effect is that the flag to turn on GS smoothing will also need to specify
a geometry file to use. Let's add that code first.

I have ported much of the C++ code to C. I am going to have to add some code
to COMSOLData3d.c to implement some helper functions that I put in Smoothable
when I wrote in C++. These need access to the bounds info from the CD3Data so
they make sense to add as methods there.

OK, so I have a draft code. It is complex enough that it is unlikely to work
first, second, or fifteenth time. But it is testable. If I have some data to
test it on!

I want a really simple chunk to test on using an array with cubes in the usual
way but with the three components pointing in three different directions.
Alas I am not sure how to create such a thing except programmatically. So I
guess I need a different way to call the driver. Too hard, just do it by hand
YUCK!

I built it and got really silly results. I fixed a whole bunch of index
problems and the results now look perfectly correct!

I did a bunch of tests on the MacPro and with the tests the smoother appears
to be working perfectly.

Before I can actually start to use it I need to implement some more geometric
primitives. I need torii and external cylinders.
You know, one very general way to handle the geometry would be simply to scan
through every element in the array and ask the geometry if it was active or
passive. It is a lot easier to implement an IsContainedIn method than it is
to run over the points that are inside a complex geometric shape.

OK, I am going to make a copy of the whole directory structure at this point
and then start a new project to continue this and to experiment with source
control.

I have created a GitHub account and have downloaded the GitHub Desktop app.
I dragged the COMSOL3DBin top level folder into the Desktop and it converted
the folder into a repository. Then I published the repository to GitHub. Now
I am trying to figure out how to alter stuff.

I have downloaded the project at home and created a CodeBlocks project
alongside it (so that we don't clutter the source with products). It is
objecting to sys/cdefs.h. It seems
that I am just using it to shorthand the


#if defined(__cplusplus)
extern "C" {
#endif

#if defined(__cplusplus)
}
#endif

brackets that allow you to use C headers in C++. I will just switch to the
full form.

Then I found several for (int i ) constructs that I missed. Corrected.
I had used the nice construct

static const int kMaxNFiles = 20;
const char* gFilenames[kMaxNFiles];

but I had to replace it with the older

#define kMaxNFiles 20
const char* gFilenames[kMaxNFiles];

With that I am compiling. Turning on stronger warnings found a bunch of
places where I put a declaration after the first executable. I fixed
all those. I still have errors on the %lf and I64 formats as well as
a bunch of // style comments that are not allowed under strict ISO90.

That should be enough cleanup for now. maybe I should figure out how to
commit these changes. COMMITED!

Now to work on the Geometry problem.
In doing that I have fallen out of love with the internal representation
of the Geoms. The single large undifferentiated mParams array is not
very readable. I am better of just putting all the properly named params
that you could want and just ignoring the ones that a particular Geom
does not use. It is certainly no worse than putting 20 nameless params
in each!

That had the side effect of making it easy to support the other directions
of iCylinder.

Now, it is the CD3List that actually does a lot of the work. The smoother
runs through the points in the array and asks the CD3list if each point
should be left active. The CD3List has to pass the question on to each
of the Geoms in the list.

That is all written. Commit it now and test tomorrow.

Trying to test has shown up a pair of inter-related that I have
previously ignored. A COMSOL file does not always hav a name on the
Model line. If that name is missing then header processing goes
completely screwy without any apparent warning AND you end up
freeing an mExpNames array that has never been alloc'd. I propose
to fix both.

Fixed. I tweaked the way that cylinders decide whether points are
inside to make sure that they are put in symmetrically. With that
the system works beautifully, at least for interior cylinders.

I now need to implement torii. But commit this first.
In implementing torii I have slimmed down the cylinder test (and
had an idea for slimming it further) and added a tolerance param
to the PointIn tests so that you pass if you are within half a
spacing of the right answer.
I originally had three separate cylinder tests, one for each
direction. I have now reduced that to 1 by introducing index
variables that are assigned to actual 0,1,2 values depending on
the orientation of the cylinder. Index 2 is the cylinder axis
and the other two are chosen to make a right handed set.
I now realise that this can be initialised when we build the
Geom and simply used in the test. The three indices will
replace the single mAxis variable.

I changed the language setting to C89 and cleaned some things
up so that it now builds without warnings (though I think that
I don't have the warning level set very high). Turned up warnings
and made them all go away!

Then I ran the static analyzer and threw up 23 issues! Most of
them were drivel, though I did catch a few not very interesting
memory leaks.

8/4/15
As I pull data from NG6Mirror13 (the ultimate model!) I find
that it would be VERY useful to be able to merge two or
more binary fields into a single file. Obviously this would
only work if the regions are the same basic shape and adjoin
or overlap in some direction.

This makes me think that I might want to slightly restructure
COMSOL3DBin. At the moment there are two basic parts, the
low-level pure C code to read and write text and binary
files and the driver program that uses that low-level code.
The driver is getting complicated as it handles more different
kinds of files and does averaging as well as file conversion.
It would be possible to add file merging but I think it would
be better to start splitting off different tools. Before I
do anything else I need to commit the source to date and then
learn how to fork the code.

I have used XCode to create a branch called SepTools.
Start by creating a pruned version of the main tool that ONLY
converts .txt files to .bin files. Call it COMSOLTxt2Bin.
Start by converting the project to a Workspace, which you
do by doing a File|Save As Workspace. I call the new space
COMSOLSepTools. I am not at all convinced that I understand
the workspace. Continue anyway.
AHA, when I went to create a new project I found an option
to add it to a workspace. I added it to the new one and
things now look the way I might expect.
New project gets a new main called COMSOLTxt2Bin.cpp.

Copied onto MacPro where I found that I was not building
the right project. Redid the new project and found that
switching to C++ had made it more picky about return types.
Fixed a bunch of CDError returns. Seems to run fine.
Commit.

8/5/15
I have processed all the COMSOL files from NG6M13 with
COMSOLTxt2Bin and the results look FINE!

Now really need a program to merge two files. Set a VERY
limited goal for COMSOLZMerge. It takes 2 binary filenames
and concatenates the two files in the z direction. It
requires that the two have the same x and y limits and
that all three deltas match. It can deal with overlap
between the files.

ZMerge _almost_ works. It writes files but some bits
of them seem to be full of zeros instead of data.
Commit anyway and try testing with smaller data files.
Seems to work with small files.
Runnng the small files in detail I found some errors in
the code that figured out what to move. I now seem to
get lovely outputs for small files.
I rewrote the code to compute the overlap between two
files and Merge now appears to work perfectly on the
big files from NG6M13. Commit.

