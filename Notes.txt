COMSOL3DBin Notes Summer 2015

7/29/15

COMSOL3DBin has been used happily for a year. I now want to improve the
smoothing. I implemented quadrant averaging a long time ago and it made a
significant improvement in the data smoothness. Now I want to add a much more
robust smoothing using the Gauss-Seidel algorithm.

I have a non-isotropic version of Gauss-Seidel running so I should be able
to add it into COMSOL3DBin quite easily.

The basic strategy is simple. I just implement a new smoothing routine just
like the quadrant smoother BUT there is the complication of needing a secondary
array to control the process and of filling that array from the geometry. The
main effect is that the flag to turn on GS smoothing will also need to specify
a geometry file to use. Let's add that code first.

I have ported much of the C++ code to C. I am going to have to add some code
to COMSOLData3d.c to implement some helper functions that I put in Smoothable
when I wrote in C++. These need access to the bounds info from the CD3Data so
they make sense to add as methods there.

OK, so I have a draft code. It is complex enough that it is unlikely to work
first, second, or fifteenth time. But it is testable. If I have some data to
test it on!

I want a really simple chunk to test on using an array with cubes in the usual
way but with the three components pointing in three different directions.
Alas I am not sure how to create such a thing except programmatically. So I
guess I need a different way to call the driver. Too hard, just do it by hand
YUCK!

I built it and got really silly results. I fixed a whole bunch of index
problems and the results now look perfectly correct!

I did a bunch of tests on the MacPro and with the tests the smoother appears
to be working perfectly.

Before I can actually start to use it I need to implement some more geometric
primitives. I need torii and external cylinders.
You know, one very general way to handle the geometry would be simply to scan
through every element in the array and ask the geometry if it was active or
passive. It is a lot easier to implement an IsContainedIn method than it is
to run over the points that are inside a complex geometric shape.

OK, I am going to make a copy of the whole directory structure at this point
and then start a new project to continue this and to experiment with source
control.

I have created a GitHub account and have downloaded the GitHub Desktop app.
I dragged the COMSOL3DBin top level folder into the Desktop and it converted
the folder into a repository. Then I published the repository to GitHub. Now
I am trying to figure out how to alter stuff.

I have downloaded the project at home and created a CodeBlocks project
alongside it (so that we don't clutter the source with products). It is
objecting to sys/cdefs.h. It seems
that I am just using it to shorthand the


#if defined(__cplusplus)
extern "C" {
#endif

#if defined(__cplusplus)
}
#endif

brackets that allow you to use C headers in C++. I will just switch to the
full form.

Then I found several for (int i ) constructs that I missed. Corrected.
I had used the nice construct

static const int kMaxNFiles = 20;
const char* gFilenames[kMaxNFiles];

but I had to replace it with the older

#define kMaxNFiles 20
const char* gFilenames[kMaxNFiles];

With that I am compiling. Turning on stronger warnings found a bunch of
places where I put a declaration after the first executable. I fixed
all those. I still have errors on the %lf and I64 formats as well as
a bunch of // style comments that are not allowed under strict ISO90.

That should be enough cleanup for now. maybe I should figure out how to
commit these changes. COMMITED!

Now to work on the Geometry problem.
In doing that I have fallen out of love with the internal representation
of the Geoms. The single large undifferentiated mParams array is not
very readable. I am better of just putting all the properly named params
that you could want and just ignoring the ones that a particular Geom
does not use. It is certainly no worse than putting 20 nameless params
in each!

That had the side effect of making it easy to support the other directions
of iCylinder.

Now, it is the CD3List that actually does a lot of the work. The smoother
runs through the points in the array and asks the CD3list if each point
should be left active. The CD3List has to pass the question on to each
of the Geoms in the list.

That is all written. Commit it now and test tomorrow.
